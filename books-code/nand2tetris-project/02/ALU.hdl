// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y, x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 *
 * Which function to compute is determined by 6 input bits denoted zx, nx, zy, ny, f, no.
 *
 * The computed function's value is called "out".
 *
 * In addition to computing out, the ALU computes two 1-bit outputs called zr and ng:
 *
 * if out == 0, zr = 1; otherwise zr = 0;
 * if out < 0, ng = 1; otherwise ng = 0.
 *
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:

// if (zx == 1) sets x = 0        // 16-bit zero constant
// if (nx == 1) sets x = ~x       // bit-wise "not" (negation)

// if (zy == 1) sets y = 0        // 16-bit zero constant
// if (ny == 1) sets y = ~y       // bit-wise "not" (negation)

// if (f == 1) sets out = x + y   // integer 2's-complement addition
// if (f == 0) sets out = x & y   // bit-wise And

// if (no == 1) sets out = ~out   // bit-wise Not

// if (out == 0) sets zr = 1
// if (out < 0) sets ng = 1

  
CHIP ALU {
    IN  
        // Two 16-bit inputs
        x[16], y[16],

        // Control bits
        zx,            // zero the x input
        nx,            // negate the x input
        zy,            // zero the y input
        ny,            // negate the y input

        f,             // compute Add(out=x + y) when 1, And(out=x & y) when 0
        no;            // negate the out output

    OUT 
        // Two 16-bit output
        out[16],

        // ALU output flags
        zr,      // 1 if (out == 0), 0 otherwise
        ng;      // 1 if (out < 0), 0 otherwise

    PARTS:

    // Like "Constraint programming" in SICP p.285

    // if (nx == 1) sets x = ~x and if (zx == 1) sets x = 0
    Not16(in=x, out=negx);
    Mux4Way16(a=x, b=false, c=negx, d=true, sel[0]=zx, sel[1]=nx, out=px);

    // if (ny == 1) sets y = ~y and if (zy == 1) sets y = 0
    Not16(in=y, out=negy);
    Mux4Way16(a=y, b=false, c=negy, d=true, sel[0]=zy, sel[1]=ny, out=py);

    And16(a=px, b=py, out=andxy);
    Add16(a=px, b=py, out=addxy);
    // f defines which function to call
    Mux16(a=andxy, b=addxy, sel=f, out=result);

    // Process out result

    Not16(in=result, out=negresult);
    // !!! Name particular pins !!!
    Mux16(a=result, b=negresult, sel=no, out=out, out[15]=ing, out[0..7]=out1, out[8..15]=out2);

    // if (out == 0) sets zr = 1
    Or8Way(in=out1, out=or1);
    Or8Way(in=out2, out=or2);
    Or(a=or1, b=or2, out=orf);
    Xor(a=orf, b=true, out=zr);

    // if (out < 0) sets ng = 1
    And(a=ing, b=true, out=ng);

}
